package compare.TEST.copy;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;

public class Graph {
	
	public static final int INFINITY=Integer.MAX_VALUE;
	
	private HashMap<Integer,Vertex> vertexMap=new HashMap<Integer,Vertex>();
	
	public static List<Integer> result = new ArrayList<>();
	
	public static int W = 200;
	
	public Graph(){
		result = new ArrayList<>();
	}
	
	//让vertexMap取得对Vertex对象的引用
	private Vertex getVertex(int vertexName){
		
	   Vertex v=vertexMap.get(vertexName);
	   if(v==null)
	   {
		   v=new Vertex(vertexName);
		   vertexMap.put(vertexName,v);
	   }
	   return v;
	}
	//将距离初始化
	private void clearAll(){
		for(Iterator< Vertex> itr=vertexMap.values().iterator();itr.hasNext();)
		{
			itr.next().reset();
		}
	}
	//显示实际最短路径
	private void printPath(Vertex dest){
		
		if(dest.path!=null)
		{
			printPath(dest.path);
			//System.out.print(" ");
		}
		result.add(dest.name);
		//System.out.print(dest.name);
	}
	
	//添加一条新的边
	public void addEdge(int sourceName,int destName){
		
		Vertex v=getVertex(sourceName);
		Vertex w=getVertex(destName);
		v.adj.add(w);
	}
	//显示一条路径
	public void printPath(int destName) throws NoSuchElementException{
		
		//System.out.print("To "+destName+": ");
		Vertex	w=vertexMap.get(destName);
		
		if(w==null)
			throw new NoSuchElementException("Destination vertex not found!");
		else if(w.dist==INFINITY)
			System.out.println(destName+" id unreachable!");
		else {
			printPath(w);
			System.out.println();
		}
	}
	
	public double calError(double[][] error_table){
		double max = 0;
		for (int i = 0; i < result.size()-1; i++) {
			int m = result.get(i);
			int n = result.get(i+1);
			if(max < error_table[m][n]){
				max = error_table[m][n];
			}
		}
		return max;
	}
	
	//无权最短路径计算
	public void unweighted(int startName){
		
		clearAll();
		Vertex start=vertexMap.get(startName);
		if(start==null)
			throw new NoSuchElementException("Start vertex not found!");
		LinkedList<Vertex> q=new LinkedList<Vertex>();
		q.addLast(start);
		start.dist=0;
		
		while(!q.isEmpty())
		{
			Vertex v=q.removeFirst();
			for(Iterator<Vertex> itr=v.adj.iterator();itr.hasNext();)
			{
				Vertex w=itr.next();
				if(w.dist==INFINITY)
				{
					w.dist=v.dist+1;
					w.path=v;
					q.addLast(w);
				}
				
			}
		}		
	}
}
